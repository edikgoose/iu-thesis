@book{google_sre,
    abstract = {The overwhelming majority of a software system{\^a}??s lifespan is spent in use, not in design or implementation. So, why does conventional wisdom insist that software engineers focus primarily on the design and development of large-scale computing systems?In this collection of essays and articles, key members of Google{\^a}??s Site Reliability Team explain how and why their commitment to the entire lifecycle has enabled the company to successfully build, deploy, monitor, and maintain some of the largest software systems in the world. You{\^a}??ll learn the principles and practices that enable Google engineers to make systems more scalable, reliable, and efficient{\^a}??lessons directly applicable to your organization.This book is divided into four sections:Introduction{\^a}??Learn what site reliability engineering is and why it differs from conventional {IT} industry {practicesPrinciples{\^a}}??Examine the patterns, behaviors, and areas of concern that influence the work of a site reliability engineer ({SRE})Practices{\^a}??Understand the theory and practice of an {SRE{\^a}}??s day-to-day work: building and operating large distributed computing {systemsManagement{\^a}}??Explore Google's best practices for training, communication, and meetings that your organization can use},
    author = {Beyer, Betsy and Jones, Chris and Petoff, Jennifer and Murphy, Niall Richard},
    date = {2016-03-23},
    isbn = {978-1-4919-5118-7},
    keywords = {Computers / Distributed Systems / General, Computers / Software Development \& Engineering / Project Management, Computers / Software Development \& Engineering / Quality Assurance \& Testing, Computers / Software Development \& Engineering / Systems Analysis \& Design, Computers / System Administration / Backup \& Recovery, Computers / System Administration / General, Computers / System Administration / Linux \& {UNIX} Administration},
    langid = {english},
    note = {Google-Books-{ID}: \_4rPCwAAQBAJ},
    pagetotal = {550},
    publisher = {"O'Reilly Media, Inc."},
    shorttitle = {Site Reliability Engineering},
    title = {Site Reliability Engineering: How Google Runs Production Systems}}

@online{load_testing_web_sites,
    abstract = {Developers typically measure a Web application's quality of service in terms of response time, throughput, and availability. Poor {QoS} translates into frustrated customers, which can lead to lost business opportunities. At the same time, company expenditures on a Web site's {IT} infrastructure are a function of the site's expected traffic. Ideally, you want to spend enough, and no more, allocating resources where they will generate the most benefit. For example, you should not upgrade your Web servers if customers experience most delays in the database server or load balancer. Thus, to maximize your {ROI}, you must determine when and how to upgrade {IT} infrastructure. One way to assess {IT} infrastructure performance is through load testing, which lets you assess how your Web site supports its expected workload by running a specified set of scripts that emulate customer behavior at different load levels. I describe the {QoS} factors load testing addresses, how to conduct load testing, and how it addresses business needs at several requirement levels.},
    langid = {american},
    title = {Load testing of Web sites},
    url = {https://ieeexplore.ieee.org/abstract/document/1020328/},
    urldate = {2023-09-24},
    bdsk-url-1 = {https://ieeexplore.ieee.org/abstract/document/1020328/}}

@online{load_testing_tips,
    abstract = {Assessing how large-scale software systems behave under load is essential because many problems cannot be uncovered without executing tests of large volumes of concurrent requests. Load-related problems can directly affect the customer-perceived quality of systems and often cost companies millions of dollars. Load testing is the standard approach for assessing how a system behaves under load. However, designing, executing and analyzing a load test can be very difficult due to the scale of the test (e.g., simulating millions of users and analyzing terabytes of data). Over the past decade, we have tackled many load testing challenges in an industrial setting. In this paper, we document the challenges that we encountered and the lessons that we learned as we addressed these challenges. We provide general guidelines for conducting load tests using an analytics-driven approach. We also discuss open research challenges that require attention from the research community. We believe that our experience can be beneficial to practitioners and researchers who are interested in the area of load testing.},
    langid = {american},
    shorttitle = {Analytics-Driven Load Testing},
    title = {Analytics-Driven Load Testing: An Industrial Experience Report on Load Testing of Large-Scale Systems},
    url = {https://ieeexplore.ieee.org/document/7965448},
    urldate = {2023-09-24},
    bdsk-url-1 = {https://ieeexplore.ieee.org/document/7965448}}

@INPROCEEDINGS{load_testing_tools,
    author={Abbas, Rabiya and Sultan, Zainab and Bhatti, Shahid Nazir},
    booktitle={2017 International Conference on Communication Technologies (ComTech)},
    title={Comparative analysis of automated load testing tools: Apache JMeter, Microsoft Visual Studio (TFS), LoadRunner, Siege},
    year={2017},
    volume={},
    number={},
    pages={39-44},
    doi={10.1109/COMTECH.2017.8065747}}

@misc{kafka_choose,
    abstract = {Distributed messaging systems form the core of big data streaming, cloud native applications and microservice architecture. With real-time critical applications there is a growing need for well-built messaging platform that is scalable, fault tolerant and has low latency. There are multiple modern messaging systems that have come up in the recent past, all with their own pros and cons. This has become problematic for the industry to decide which messaging system is the most suitable for a specific application. An in-depth study is required to decide which features of a messaging system meet the needs of the application. This survey paper outlines the modern messaging technologies and delves deep on three popular publisher/subscriber systems- Apache Kafka, {RabbitMQ} and {NATS} Streaming. The paper provides information about messaging systems, the use cases, similarities and differences of features to facilitate users to make an informed decision and also pave way for future research and development.},
    author = {Sharvari T and Sowmya Nag K},
    date = {2019-12-08},
    doi = {10.48550/arXiv.1912.03715},
    eprint = {1912.03715 [cs]},
    eprinttype = {arxiv},
    keywords = {Computer Science - Distributed, Parallel, and Cluster Computing},
    number = {{arXiv}:1912.03715},
    publisher = {{arXiv}},
    title = {A study on Modern Messaging Systems- Kafka, {RabbitMQ} and {NATS} Streaming},
    url = {http://arxiv.org/abs/1912.03715},
    urldate = {2023-10-29},
    bdsk-url-1 = {http://arxiv.org/abs/1912.03715},
    bdsk-url-2 = {https://doi.org/10.48550/arXiv.1912.03715}}

@software{yandex_tank_api,
    abstract = {{HTTP} {API} for Yandex.Tank},
    date = {2023-05-10},
    keywords = {load-testing, yandex-tank, tank, tank-api},
    note = {original-date: 2014-12-23T15:32:20Z},
    publisher = {Yandex load tools},
    rights = {{MIT}},
    title = {Yandex.Tank {API}},
    url = {https://github.com/yandex-load/yandex-tank-api},
    urldate = {2023-11-08},
    bdsk-url-1 = {https://github.com/yandex-load/yandex-tank-api}}

@software{yandex_tank,
    abstract = {Load and performance benchmark tool},
    date = {2023-11-08},
    keywords = {framework, load-testing, performance, performance-test, python},
    note = {original-date: 2012-07-23T11:05:58Z},
    publisher = {Yandex},
    rights = {{LGPL}-2.1},
    title = {Yandex Tank},
    url = {https://github.com/yandex/yandex-tank},
    urldate = {2023-11-09},
    bdsk-url-1 = {https://github.com/yandex/yandex-tank}}

@online{one_second_article,
    title = {How One Second Could Cost Amazon \$1.6 Billion In Sales},
    url = {https://www.fastcompany.com/1825005/how-one-second-could-cost-amazon-16-billion-sales},
    urldate = {2023-11-09},
    bdsk-url-1 = {https://www.fastcompany.com/1825005/how-one-second-could-cost-amazon-16-billion-sales}}

@article{load_testing_tools_rus,
    abstract = {В статье рассмотрены основные аспекты тестирования производительности программных продуктов. Авторами приводится классификация методов тестирования. При этом основное внимание уделяется так называемому нагрузочному тестированию. Нагрузочное тестирование проводится с целью определения степени соответствия системы нефункциональным требованиям, таким как максимальное количество одновременных пользователей, время отклика информационного сервиса и т. п. В работе подробно описаны различные виды нагрузочных тестов, а также представлена методика тестирования для каждого вида, предложен набор показателей для классификации инструментов тестирования, на основе которого приведен сравнительный анализ существующих инструментальных средств для проведения нагрузочного тестирования.},
    author = {Мясников, С. О. and Намиот, Д. Е.},
    date = {2018},
    issn = {1993-8314, 2687-0649},
    journaltitle = {Прикладная Информатика},
    keywords = {Автоматизация Тестирования, Нагрузочное Тестирование, Отказоустойчивость, Производительность},
    langid = {russian},
    number = {1},
    pages = {92--102},
    title = {Инструменты нагрузочного тестирования},
    url = {https://elibrary.ru/item.asp?id=32601827},
    urldate = {2023-11-14},
    volume = {13},
    bdsk-url-1 = {https://elibrary.ru/item.asp?id=32601827}}

@online{consul,
    abstract = {Consul is a service networking solution to automate network configurations, discover services, and enable secure connectivity across any cloud or runtime.},
    langid = {english},
    title = {Consul by {HashiCorp}},
    titleaddon = {Consul by {HashiCorp}},
    url = {https://www.consul.io/},
    urldate = {2023-11-09},
    bdsk-url-1 = {https://www.consul.io/}
}

@software{phantom,
    abstract = {I/O engine with some modules},
    date = {2023-09-12},
    note = {original-date: 2012-08-21T08:13:03Z},
    publisher = {Yandex load tools},
    rights = {{LGPL}-2.1},
    title = {yandex-load/phantom},
    url = {https://github.com/yandex-load/phantom},
    urldate = {2023-11-14},
    bdsk-url-1 = {https://github.com/yandex-load/phantom}}

@online{kubernetes,
    abstract = {Kubernetes is a portable, extensible, open source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation. It has a large, rapidly growing ecosystem. Kubernetes services, support, and tools are widely available.},
    langid = {english},
    title = {Overview},
    titleaddon = {Kubernetes},
    url = {https://kubernetes.io/docs/concepts/overview/},
    urldate = {2023-11-14},
    bdsk-url-1 = {https://kubernetes.io/docs/concepts/overview/}
}


@article{circuit_breaker,
    abstract = {Resilience is one of the important issues in the implementation of microservices architecture, and to handle it, various approaches and solutions are available. A circuit breaker is a solution to handle failure in microservices and is now widely implemented both as a library and as a pattern embedded in the service and client modules. Despite the widespread use of circuit breaker, the research on circuit breaker is relatively less than research subject on other microservices area, or in microservices resiliency. This article provides an overview of recent research in circuit breaker, map the research subject, and find the opportunities for future research. The research is conducted using a systematic map study but the results focused on extract the knowledge and find important keywords to build a conceptual overview of the research field circuit breaker. The result shows that there are five categories of research subjects which are concept, strategy, management, implementation, and products. After exploring each category, we can propose the opportunity in enhancing the use of circuit breaker in microservices architecture, by explore the potential implementation of proxy circuit breaker.},
    author = {{Falahah} and Surendro, Kridanto and Sunindyo, Wikan Danar},
    date = {2021-02},
    doi = {10.1088/1757-899X/1077/1/012065},
    issn = {1757-899X},
    journaltitle = {{IOP} Conf. Ser.: Mater. Sci. Eng.},
    langid = {english},
    note = {Publisher: {IOP} Publishing},
    number = {1},
    pages = {012065},
    shorttitle = {Circuit Breaker in Microservices},
    title = {Circuit Breaker in Microservices: State of the Art and Future Prospects},
    url = {https://dx.doi.org/10.1088/1757-899X/1077/1/012065},
    urldate = {2023-11-14},
    volume = {1077},
    bdsk-url-1 = {https://dx.doi.org/10.1088/1757-899X/1077/1/012065}}


@INPROCEEDINGS{reliability_patterns,
    author={Mendonca, Nabor C. and Aderaldo, Carlos M. and Camara, Javier and Garlan, David},
    booktitle={2020 IEEE International Conference on Software Architecture (ICSA)},
    title={Model-Based Analysis of Microservice Resiliency Patterns},
    year={2020},
    volume={},
    number={},
    pages={114-124},
    doi={10.1109/ICSA47634.2020.00019}
}


@article{frameworks,
    abstract = {Web applications have a complex structure, and for more efficient and faster writing of original program code, frameworks are often used. There are numerous different frameworks on the market that are used to build different parts of software archite...},
    author = {Kalu{\v z}a, Marin and Kalanj, Marijana and Vukeli{\'c}, Bernard},
    date = {2019-05-13},
    doi = {10.31784/zvr.7.1.10},
    issn = {1848-1299, 1849-1723},
    journaltitle = {Zbornik Veleu{\v c}ili{\v s}ta u Rijeci},
    langid = {english},
    note = {Publisher: Polytechnic of Rijeka},
    number = {1},
    pages = {317--332},
    title = {A {COMPARISON} {OF} {BACK}-{END} {FRAMEWORKS} {FOR} {WEB} {APPLICATION} {DEVELOPMENT}},
    url = {https://hrcak.srce.hr/en/clanak/321176%5C%253F},
    urldate = {2023-11-14},
    volume = {7},
    bdsk-url-1 = {https://hrcak.srce.hr/en/clanak/321176%5C%253F},
    bdsk-url-2 = {https://doi.org/10.31784/zvr.7.1.10}}

@incollection{event_driven,
    booktitle = {Enterprise Service Oriented Architectures},
    date = {2006},
    doi = {10.1007/1-4020-3705-8_8},
    isbn = {978-1-4020-3704-7},
    langid = {english},
    location = {Berlin/Heidelberg},
    pages = {317--355},
    publisher = {Springer-Verlag},
    title = {Event-Driven Architecture},
    url = {http://link.springer.com/10.1007/1-4020-3705-8_8},
    urldate = {2023-11-14},
    bdsk-url-1 = {http://link.springer.com/10.1007/1-4020-3705-8_8},
    bdsk-url-2 = {https://doi.org/10.1007/1-4020-3705-8_8}}

@online{docker_start,
    abstract = {Get started with the Docker basics in this comprehensive overview, You'll learn about containers, images, and how to containerize your first application.},
    date = {0200},
    langid = {english},
    title = {Overview of the get started guide},
    titleaddon = {Docker Documentation},
    url = {https://docs.docker.com/get-started/},
    urldate = {2023-11-14},
    bdsk-url-1 = {https://docs.docker.com/get-started/}
}

@online{load_testing_wiki,
    booktitle = {Wikipedia},
    date = {2024-03-10},
    langid = {english},
    note = {Page Version {ID}: 1212888659},
    rights = {Creative Commons Attribution-{ShareAlike} License},
    title = {Software load testing},
    url = {https://en.wikipedia.org/w/index.php?title=Software_load_testing&oldid=1212888659},
    urldate = {2024-03-18},
    bdsk-url-1 = {https://en.wikipedia.org/w/index.php?title=Software_load_testing&oldid=1212888659}
}

@online{yaml,
    title = {How One Second Could Cost Amazon \$1.6 Billion In Sales},
    url = {https://www.fastcompany.com/1825005/how-one-second-could-cost-amazon-16-billion-sales},
    urldate = {2024-03-21},
    bdsk-url-1 = {https://www.fastcompany.com/1825005/how-one-second-could-cost-amazon-16-billion-sales}}



@online{resilience4j,
    langid = {english},
    title = {resilience4j},
    titleaddon = {resilience4j},
    url = {https://resilience4j.readme.io/},
    urldate = {2024-03-21},
    bdsk-url-1 = {https://resilience4j.readme.io/}
}


@software{circuitbreaker,
    rights = {{OSI} Approved :: {BSD} License},
    shorttitle = {circuitbreaker},
    title = {circuitbreaker: Python Circuit Breaker pattern implementation},
    url = {https://github.com/fabfuel/circuitbreaker},
    urldate = {2024-03-21},
    version = {2.0.0},
    bdsk-url-1 = {https://github.com/fabfuel/circuitbreaker}
}
